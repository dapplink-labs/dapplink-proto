// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: savour_rpc/market.proto

package market

import (
	common "./proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Exchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Exchange) Reset() {
	*x = Exchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exchange) ProtoMessage() {}

func (x *Exchange) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exchange.ProtoReflect.Descriptor instead.
func (*Exchange) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{0}
}

func (x *Exchange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Exchange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exchange) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Base  string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	Quote string `protobuf:"bytes,4,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{2}
}

func (x *Symbol) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Symbol) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *Symbol) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type SymbolPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Base      string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	Quote     string `protobuf:"bytes,4,opt,name=quote,proto3" json:"quote,omitempty"`
	Exchange  string `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol    string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	BuyPrice  string `protobuf:"bytes,7,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SellPrice string `protobuf:"bytes,8,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	AvgPrice  string `protobuf:"bytes,9,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	UsdPrice  string `protobuf:"bytes,10,opt,name=usd_price,json=usdPrice,proto3" json:"usd_price,omitempty"`
	CnyPrice  string `protobuf:"bytes,11,opt,name=cny_price,json=cnyPrice,proto3" json:"cny_price,omitempty"`
	Margin    string `protobuf:"bytes,12,opt,name=margin,proto3" json:"margin,omitempty"`
}

func (x *SymbolPrice) Reset() {
	*x = SymbolPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPrice) ProtoMessage() {}

func (x *SymbolPrice) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPrice.ProtoReflect.Descriptor instead.
func (*SymbolPrice) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{3}
}

func (x *SymbolPrice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SymbolPrice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SymbolPrice) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *SymbolPrice) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *SymbolPrice) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SymbolPrice) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolPrice) GetBuyPrice() string {
	if x != nil {
		return x.BuyPrice
	}
	return ""
}

func (x *SymbolPrice) GetSellPrice() string {
	if x != nil {
		return x.SellPrice
	}
	return ""
}

func (x *SymbolPrice) GetAvgPrice() string {
	if x != nil {
		return x.AvgPrice
	}
	return ""
}

func (x *SymbolPrice) GetUsdPrice() string {
	if x != nil {
		return x.UsdPrice
	}
	return ""
}

func (x *SymbolPrice) GetCnyPrice() string {
	if x != nil {
		return x.CnyPrice
	}
	return ""
}

func (x *SymbolPrice) GetMargin() string {
	if x != nil {
		return x.Margin
	}
	return ""
}

type StableCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StableCoin) Reset() {
	*x = StableCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoin) ProtoMessage() {}

func (x *StableCoin) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoin.ProtoReflect.Descriptor instead.
func (*StableCoin) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{4}
}

func (x *StableCoin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StableCoin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StableCoinPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UsdPrice string `protobuf:"bytes,3,opt,name=usd_price,json=usdPrice,proto3" json:"usd_price,omitempty"`
	CnyPrice string `protobuf:"bytes,4,opt,name=cny_price,json=cnyPrice,proto3" json:"cny_price,omitempty"`
	Margin   string `protobuf:"bytes,5,opt,name=margin,proto3" json:"margin,omitempty"`
}

func (x *StableCoinPrice) Reset() {
	*x = StableCoinPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCoinPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoinPrice) ProtoMessage() {}

func (x *StableCoinPrice) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoinPrice.ProtoReflect.Descriptor instead.
func (*StableCoinPrice) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{5}
}

func (x *StableCoinPrice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StableCoinPrice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StableCoinPrice) GetUsdPrice() string {
	if x != nil {
		return x.UsdPrice
	}
	return ""
}

func (x *StableCoinPrice) GetCnyPrice() string {
	if x != nil {
		return x.CnyPrice
	}
	return ""
}

func (x *StableCoinPrice) GetMargin() string {
	if x != nil {
		return x.Margin
	}
	return ""
}

type ExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerToken string `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
}

func (x *ExchangeRequest) Reset() {
	*x = ExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRequest) ProtoMessage() {}

func (x *ExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{6}
}

func (x *ExchangeRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

type ExchangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      common.ReturnCode `protobuf:"varint,1,opt,name=code,proto3,enum=savour_rpc.ReturnCode" json:"code,omitempty"`
	Msg       string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Exchanges []*Exchange       `protobuf:"bytes,3,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
}

func (x *ExchangeResponse) Reset() {
	*x = ExchangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeResponse) ProtoMessage() {}

func (x *ExchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeResponse.ProtoReflect.Descriptor instead.
func (*ExchangeResponse) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{7}
}

func (x *ExchangeResponse) GetCode() common.ReturnCode {
	if x != nil {
		return x.Code
	}
	return common.ReturnCode(0)
}

func (x *ExchangeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ExchangeResponse) GetExchanges() []*Exchange {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

type AssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerToken string `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	ExchangeId    string `protobuf:"bytes,2,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	IsBase        bool   `protobuf:"varint,3,opt,name=is_base,json=isBase,proto3" json:"is_base,omitempty"`
}

func (x *AssetRequest) Reset() {
	*x = AssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRequest) ProtoMessage() {}

func (x *AssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRequest.ProtoReflect.Descriptor instead.
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{8}
}

func (x *AssetRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

func (x *AssetRequest) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *AssetRequest) GetIsBase() bool {
	if x != nil {
		return x.IsBase
	}
	return false
}

type AssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   common.ReturnCode `protobuf:"varint,1,opt,name=code,proto3,enum=savour_rpc.ReturnCode" json:"code,omitempty"`
	Msg    string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Assets []*Asset          `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *AssetResponse) Reset() {
	*x = AssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResponse) ProtoMessage() {}

func (x *AssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResponse.ProtoReflect.Descriptor instead.
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{9}
}

func (x *AssetResponse) GetCode() common.ReturnCode {
	if x != nil {
		return x.Code
	}
	return common.ReturnCode(0)
}

func (x *AssetResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AssetResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type SymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerToken string `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	ExchangeId    string `protobuf:"bytes,2,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
}

func (x *SymbolRequest) Reset() {
	*x = SymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolRequest) ProtoMessage() {}

func (x *SymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolRequest.ProtoReflect.Descriptor instead.
func (*SymbolRequest) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{10}
}

func (x *SymbolRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

func (x *SymbolRequest) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

type SymbolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    common.ReturnCode `protobuf:"varint,1,opt,name=code,proto3,enum=savour_rpc.ReturnCode" json:"code,omitempty"`
	Msg     string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Symbols []*Symbol         `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *SymbolResponse) Reset() {
	*x = SymbolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolResponse) ProtoMessage() {}

func (x *SymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolResponse.ProtoReflect.Descriptor instead.
func (*SymbolResponse) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{11}
}

func (x *SymbolResponse) GetCode() common.ReturnCode {
	if x != nil {
		return x.Code
	}
	return common.ReturnCode(0)
}

func (x *SymbolResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SymbolResponse) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type SymbolPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerToken string `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	ExchangeId    string `protobuf:"bytes,2,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	SymbolId      string `protobuf:"bytes,3,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
}

func (x *SymbolPriceRequest) Reset() {
	*x = SymbolPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPriceRequest) ProtoMessage() {}

func (x *SymbolPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPriceRequest.ProtoReflect.Descriptor instead.
func (*SymbolPriceRequest) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{12}
}

func (x *SymbolPriceRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

func (x *SymbolPriceRequest) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *SymbolPriceRequest) GetSymbolId() string {
	if x != nil {
		return x.SymbolId
	}
	return ""
}

type SymbolPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         common.ReturnCode `protobuf:"varint,1,opt,name=code,proto3,enum=savour_rpc.ReturnCode" json:"code,omitempty"`
	Msg          string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SymbolPrices []*SymbolPrice    `protobuf:"bytes,3,rep,name=symbol_prices,json=symbolPrices,proto3" json:"symbol_prices,omitempty"`
}

func (x *SymbolPriceResponse) Reset() {
	*x = SymbolPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPriceResponse) ProtoMessage() {}

func (x *SymbolPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPriceResponse.ProtoReflect.Descriptor instead.
func (*SymbolPriceResponse) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{13}
}

func (x *SymbolPriceResponse) GetCode() common.ReturnCode {
	if x != nil {
		return x.Code
	}
	return common.ReturnCode(0)
}

func (x *SymbolPriceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SymbolPriceResponse) GetSymbolPrices() []*SymbolPrice {
	if x != nil {
		return x.SymbolPrices
	}
	return nil
}

type StableCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerToken string `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
}

func (x *StableCoinRequest) Reset() {
	*x = StableCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoinRequest) ProtoMessage() {}

func (x *StableCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoinRequest.ProtoReflect.Descriptor instead.
func (*StableCoinRequest) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{14}
}

func (x *StableCoinRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

type StableCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        common.ReturnCode `protobuf:"varint,1,opt,name=code,proto3,enum=savour_rpc.ReturnCode" json:"code,omitempty"`
	Msg         string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	StableCoins []*StableCoin     `protobuf:"bytes,3,rep,name=stable_coins,json=stableCoins,proto3" json:"stable_coins,omitempty"`
}

func (x *StableCoinResponse) Reset() {
	*x = StableCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoinResponse) ProtoMessage() {}

func (x *StableCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoinResponse.ProtoReflect.Descriptor instead.
func (*StableCoinResponse) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{15}
}

func (x *StableCoinResponse) GetCode() common.ReturnCode {
	if x != nil {
		return x.Code
	}
	return common.ReturnCode(0)
}

func (x *StableCoinResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *StableCoinResponse) GetStableCoins() []*StableCoin {
	if x != nil {
		return x.StableCoins
	}
	return nil
}

type StableCoinPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerToken string `protobuf:"bytes,1,opt,name=consumer_token,json=consumerToken,proto3" json:"consumer_token,omitempty"`
	CoinId        string `protobuf:"bytes,2,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
}

func (x *StableCoinPriceRequest) Reset() {
	*x = StableCoinPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCoinPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoinPriceRequest) ProtoMessage() {}

func (x *StableCoinPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoinPriceRequest.ProtoReflect.Descriptor instead.
func (*StableCoinPriceRequest) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{16}
}

func (x *StableCoinPriceRequest) GetConsumerToken() string {
	if x != nil {
		return x.ConsumerToken
	}
	return ""
}

func (x *StableCoinPriceRequest) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

type StableCoinPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       common.ReturnCode  `protobuf:"varint,1,opt,name=code,proto3,enum=savour_rpc.ReturnCode" json:"code,omitempty"`
	Msg        string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	CoinPrices []*StableCoinPrice `protobuf:"bytes,3,rep,name=coin_prices,json=coinPrices,proto3" json:"coin_prices,omitempty"`
}

func (x *StableCoinPriceResponse) Reset() {
	*x = StableCoinPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_savour_rpc_market_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCoinPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoinPriceResponse) ProtoMessage() {}

func (x *StableCoinPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_savour_rpc_market_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoinPriceResponse.ProtoReflect.Descriptor instead.
func (*StableCoinPriceResponse) Descriptor() ([]byte, []int) {
	return file_savour_rpc_market_proto_rawDescGZIP(), []int{17}
}

func (x *StableCoinPriceResponse) GetCode() common.ReturnCode {
	if x != nil {
		return x.Code
	}
	return common.ReturnCode(0)
}

func (x *StableCoinPriceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *StableCoinPriceResponse) GetCoinPrices() []*StableCoinPrice {
	if x != nil {
		return x.CoinPrices
	}
	return nil
}

var File_savour_rpc_market_proto protoreflect.FileDescriptor

var file_savour_rpc_market_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x17, 0x73, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x05, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0xba,
	0x02, 0x0a, 0x0b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6e, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0x30, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6e, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0x38, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x6f, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x22, 0x7f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x30, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x22, 0x79, 0x0a, 0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x13,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x16, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x43, 0x0a,
	0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x32, 0xc4, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x09, 0x67, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x20,
	0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x29, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x25, 0x0a, 0x13, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x73, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5a, 0x0e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_savour_rpc_market_proto_rawDescOnce sync.Once
	file_savour_rpc_market_proto_rawDescData = file_savour_rpc_market_proto_rawDesc
)

func file_savour_rpc_market_proto_rawDescGZIP() []byte {
	file_savour_rpc_market_proto_rawDescOnce.Do(func() {
		file_savour_rpc_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_savour_rpc_market_proto_rawDescData)
	})
	return file_savour_rpc_market_proto_rawDescData
}

var file_savour_rpc_market_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_savour_rpc_market_proto_goTypes = []any{
	(*Exchange)(nil),                // 0: savour_rpc.market.Exchange
	(*Asset)(nil),                   // 1: savour_rpc.market.Asset
	(*Symbol)(nil),                  // 2: savour_rpc.market.Symbol
	(*SymbolPrice)(nil),             // 3: savour_rpc.market.SymbolPrice
	(*StableCoin)(nil),              // 4: savour_rpc.market.StableCoin
	(*StableCoinPrice)(nil),         // 5: savour_rpc.market.StableCoinPrice
	(*ExchangeRequest)(nil),         // 6: savour_rpc.market.ExchangeRequest
	(*ExchangeResponse)(nil),        // 7: savour_rpc.market.ExchangeResponse
	(*AssetRequest)(nil),            // 8: savour_rpc.market.AssetRequest
	(*AssetResponse)(nil),           // 9: savour_rpc.market.AssetResponse
	(*SymbolRequest)(nil),           // 10: savour_rpc.market.SymbolRequest
	(*SymbolResponse)(nil),          // 11: savour_rpc.market.SymbolResponse
	(*SymbolPriceRequest)(nil),      // 12: savour_rpc.market.SymbolPriceRequest
	(*SymbolPriceResponse)(nil),     // 13: savour_rpc.market.SymbolPriceResponse
	(*StableCoinRequest)(nil),       // 14: savour_rpc.market.StableCoinRequest
	(*StableCoinResponse)(nil),      // 15: savour_rpc.market.StableCoinResponse
	(*StableCoinPriceRequest)(nil),  // 16: savour_rpc.market.StableCoinPriceRequest
	(*StableCoinPriceResponse)(nil), // 17: savour_rpc.market.StableCoinPriceResponse
	(common.ReturnCode)(0),          // 18: savour_rpc.ReturnCode
}
var file_savour_rpc_market_proto_depIdxs = []int32{
	18, // 0: savour_rpc.market.ExchangeResponse.code:type_name -> savour_rpc.ReturnCode
	0,  // 1: savour_rpc.market.ExchangeResponse.exchanges:type_name -> savour_rpc.market.Exchange
	18, // 2: savour_rpc.market.AssetResponse.code:type_name -> savour_rpc.ReturnCode
	1,  // 3: savour_rpc.market.AssetResponse.assets:type_name -> savour_rpc.market.Asset
	18, // 4: savour_rpc.market.SymbolResponse.code:type_name -> savour_rpc.ReturnCode
	2,  // 5: savour_rpc.market.SymbolResponse.symbols:type_name -> savour_rpc.market.Symbol
	18, // 6: savour_rpc.market.SymbolPriceResponse.code:type_name -> savour_rpc.ReturnCode
	3,  // 7: savour_rpc.market.SymbolPriceResponse.symbol_prices:type_name -> savour_rpc.market.SymbolPrice
	18, // 8: savour_rpc.market.StableCoinResponse.code:type_name -> savour_rpc.ReturnCode
	4,  // 9: savour_rpc.market.StableCoinResponse.stable_coins:type_name -> savour_rpc.market.StableCoin
	18, // 10: savour_rpc.market.StableCoinPriceResponse.code:type_name -> savour_rpc.ReturnCode
	5,  // 11: savour_rpc.market.StableCoinPriceResponse.coin_prices:type_name -> savour_rpc.market.StableCoinPrice
	6,  // 12: savour_rpc.market.PriceService.getExchanges:input_type -> savour_rpc.market.ExchangeRequest
	8,  // 13: savour_rpc.market.PriceService.getAssets:input_type -> savour_rpc.market.AssetRequest
	10, // 14: savour_rpc.market.PriceService.getSymbols:input_type -> savour_rpc.market.SymbolRequest
	12, // 15: savour_rpc.market.PriceService.getSymbolPrices:input_type -> savour_rpc.market.SymbolPriceRequest
	14, // 16: savour_rpc.market.PriceService.getStableCoins:input_type -> savour_rpc.market.StableCoinRequest
	16, // 17: savour_rpc.market.PriceService.getStableCoinPrice:input_type -> savour_rpc.market.StableCoinPriceRequest
	7,  // 18: savour_rpc.market.PriceService.getExchanges:output_type -> savour_rpc.market.ExchangeResponse
	9,  // 19: savour_rpc.market.PriceService.getAssets:output_type -> savour_rpc.market.AssetResponse
	11, // 20: savour_rpc.market.PriceService.getSymbols:output_type -> savour_rpc.market.SymbolResponse
	13, // 21: savour_rpc.market.PriceService.getSymbolPrices:output_type -> savour_rpc.market.SymbolPriceResponse
	15, // 22: savour_rpc.market.PriceService.getStableCoins:output_type -> savour_rpc.market.StableCoinResponse
	17, // 23: savour_rpc.market.PriceService.getStableCoinPrice:output_type -> savour_rpc.market.StableCoinPriceResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_savour_rpc_market_proto_init() }
func file_savour_rpc_market_proto_init() {
	if File_savour_rpc_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_savour_rpc_market_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Exchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StableCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StableCoinPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ExchangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StableCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StableCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StableCoinPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_savour_rpc_market_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*StableCoinPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_savour_rpc_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_savour_rpc_market_proto_goTypes,
		DependencyIndexes: file_savour_rpc_market_proto_depIdxs,
		MessageInfos:      file_savour_rpc_market_proto_msgTypes,
	}.Build()
	File_savour_rpc_market_proto = out.File
	file_savour_rpc_market_proto_rawDesc = nil
	file_savour_rpc_market_proto_goTypes = nil
	file_savour_rpc_market_proto_depIdxs = nil
}
