# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: savour_rpc/wallet.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import savour_rpc.common_pb2
import savour_rpc.wallet_pb2


class WalletServiceBase(abc.ABC):

    @abc.abstractmethod
    async def getSupportCoins(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.SupportCoinsRequest, savour_rpc.wallet_pb2.SupportCoinsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def convertAddress(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.ConvertAddressRequest, savour_rpc.wallet_pb2.ConvertAddressResponse]') -> None:
        pass

    @abc.abstractmethod
    async def validAddress(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.ValidAddressRequest, savour_rpc.wallet_pb2.ValidAddressResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getBlock(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.BlockRequest, savour_rpc.wallet_pb2.BlockResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getNonce(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.NonceRequest, savour_rpc.wallet_pb2.NonceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getGasPrice(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.GasPriceRequest, savour_rpc.wallet_pb2.GasPriceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getBalance(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.BalanceRequest, savour_rpc.wallet_pb2.BalanceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getAccount(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.AccountRequest, savour_rpc.wallet_pb2.AccountResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getMinRent(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.MinRentRequest, savour_rpc.wallet_pb2.MinRentResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SendTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.SendTxRequest, savour_rpc.wallet_pb2.SendTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getTxByAddress(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.TxAddressRequest, savour_rpc.wallet_pb2.TxAddressResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getTxByHash(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.TxHashRequest, savour_rpc.wallet_pb2.TxHashResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getUtxo(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.UtxoRequest, savour_rpc.wallet_pb2.UtxoResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getUnspentOutputs(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.UnspentOutputsRequest, savour_rpc.wallet_pb2.UnspentOutputsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getUtxoInsFromData(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.UtxoInsFromDataRequest, savour_rpc.wallet_pb2.UtxoInsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getAccountTxFromData(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.TxFromDataRequest, savour_rpc.wallet_pb2.AccountTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getUtxoTxFromData(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.TxFromDataRequest, savour_rpc.wallet_pb2.UtxoTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getAccountTxFromSignedData(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.TxFromSignedDataRequest, savour_rpc.wallet_pb2.AccountTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetUtxoTxFromSignedData(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.TxFromSignedDataRequest, savour_rpc.wallet_pb2.UtxoTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def createAccountSignedTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.CreateAccountSignedTxRequest, savour_rpc.wallet_pb2.CreateSignedTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def createAccountTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.CreateAccountTxRequest, savour_rpc.wallet_pb2.CreateAccountTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def createUtxoSignedTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.CreateUtxoSignedTxRequest, savour_rpc.wallet_pb2.CreateSignedTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def createUtxoTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.CreateUtxoTxRequest, savour_rpc.wallet_pb2.CreateUtxoTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def verifyAccountSignedTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.VerifySignedTxRequest, savour_rpc.wallet_pb2.VerifySignedTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def verifyUtxoSignedTx(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.VerifySignedTxRequest, savour_rpc.wallet_pb2.VerifySignedTxResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ABIBinToJSON(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.ABIBinToJSONRequest, savour_rpc.wallet_pb2.ABIBinToJSONResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ABIJSONToBin(self, stream: 'grpclib.server.Stream[savour_rpc.wallet_pb2.ABIJSONToBinRequest, savour_rpc.wallet_pb2.ABIJSONToBinResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/savour_rpc.wallet.WalletService/getSupportCoins': grpclib.const.Handler(
                self.getSupportCoins,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.SupportCoinsRequest,
                savour_rpc.wallet_pb2.SupportCoinsResponse,
            ),
            '/savour_rpc.wallet.WalletService/convertAddress': grpclib.const.Handler(
                self.convertAddress,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.ConvertAddressRequest,
                savour_rpc.wallet_pb2.ConvertAddressResponse,
            ),
            '/savour_rpc.wallet.WalletService/validAddress': grpclib.const.Handler(
                self.validAddress,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.ValidAddressRequest,
                savour_rpc.wallet_pb2.ValidAddressResponse,
            ),
            '/savour_rpc.wallet.WalletService/getBlock': grpclib.const.Handler(
                self.getBlock,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.BlockRequest,
                savour_rpc.wallet_pb2.BlockResponse,
            ),
            '/savour_rpc.wallet.WalletService/getNonce': grpclib.const.Handler(
                self.getNonce,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.NonceRequest,
                savour_rpc.wallet_pb2.NonceResponse,
            ),
            '/savour_rpc.wallet.WalletService/getGasPrice': grpclib.const.Handler(
                self.getGasPrice,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.GasPriceRequest,
                savour_rpc.wallet_pb2.GasPriceResponse,
            ),
            '/savour_rpc.wallet.WalletService/getBalance': grpclib.const.Handler(
                self.getBalance,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.BalanceRequest,
                savour_rpc.wallet_pb2.BalanceResponse,
            ),
            '/savour_rpc.wallet.WalletService/getAccount': grpclib.const.Handler(
                self.getAccount,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.AccountRequest,
                savour_rpc.wallet_pb2.AccountResponse,
            ),
            '/savour_rpc.wallet.WalletService/getMinRent': grpclib.const.Handler(
                self.getMinRent,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.MinRentRequest,
                savour_rpc.wallet_pb2.MinRentResponse,
            ),
            '/savour_rpc.wallet.WalletService/SendTx': grpclib.const.Handler(
                self.SendTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.SendTxRequest,
                savour_rpc.wallet_pb2.SendTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/getTxByAddress': grpclib.const.Handler(
                self.getTxByAddress,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.TxAddressRequest,
                savour_rpc.wallet_pb2.TxAddressResponse,
            ),
            '/savour_rpc.wallet.WalletService/getTxByHash': grpclib.const.Handler(
                self.getTxByHash,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.TxHashRequest,
                savour_rpc.wallet_pb2.TxHashResponse,
            ),
            '/savour_rpc.wallet.WalletService/getUtxo': grpclib.const.Handler(
                self.getUtxo,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.UtxoRequest,
                savour_rpc.wallet_pb2.UtxoResponse,
            ),
            '/savour_rpc.wallet.WalletService/getUnspentOutputs': grpclib.const.Handler(
                self.getUnspentOutputs,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.UnspentOutputsRequest,
                savour_rpc.wallet_pb2.UnspentOutputsResponse,
            ),
            '/savour_rpc.wallet.WalletService/getUtxoInsFromData': grpclib.const.Handler(
                self.getUtxoInsFromData,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.UtxoInsFromDataRequest,
                savour_rpc.wallet_pb2.UtxoInsResponse,
            ),
            '/savour_rpc.wallet.WalletService/getAccountTxFromData': grpclib.const.Handler(
                self.getAccountTxFromData,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.TxFromDataRequest,
                savour_rpc.wallet_pb2.AccountTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/getUtxoTxFromData': grpclib.const.Handler(
                self.getUtxoTxFromData,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.TxFromDataRequest,
                savour_rpc.wallet_pb2.UtxoTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/getAccountTxFromSignedData': grpclib.const.Handler(
                self.getAccountTxFromSignedData,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.TxFromSignedDataRequest,
                savour_rpc.wallet_pb2.AccountTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/GetUtxoTxFromSignedData': grpclib.const.Handler(
                self.GetUtxoTxFromSignedData,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.TxFromSignedDataRequest,
                savour_rpc.wallet_pb2.UtxoTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/createAccountSignedTx': grpclib.const.Handler(
                self.createAccountSignedTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.CreateAccountSignedTxRequest,
                savour_rpc.wallet_pb2.CreateSignedTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/createAccountTx': grpclib.const.Handler(
                self.createAccountTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.CreateAccountTxRequest,
                savour_rpc.wallet_pb2.CreateAccountTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/createUtxoSignedTx': grpclib.const.Handler(
                self.createUtxoSignedTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.CreateUtxoSignedTxRequest,
                savour_rpc.wallet_pb2.CreateSignedTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/createUtxoTx': grpclib.const.Handler(
                self.createUtxoTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.CreateUtxoTxRequest,
                savour_rpc.wallet_pb2.CreateUtxoTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/verifyAccountSignedTx': grpclib.const.Handler(
                self.verifyAccountSignedTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.VerifySignedTxRequest,
                savour_rpc.wallet_pb2.VerifySignedTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/verifyUtxoSignedTx': grpclib.const.Handler(
                self.verifyUtxoSignedTx,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.VerifySignedTxRequest,
                savour_rpc.wallet_pb2.VerifySignedTxResponse,
            ),
            '/savour_rpc.wallet.WalletService/ABIBinToJSON': grpclib.const.Handler(
                self.ABIBinToJSON,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.ABIBinToJSONRequest,
                savour_rpc.wallet_pb2.ABIBinToJSONResponse,
            ),
            '/savour_rpc.wallet.WalletService/ABIJSONToBin': grpclib.const.Handler(
                self.ABIJSONToBin,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.wallet_pb2.ABIJSONToBinRequest,
                savour_rpc.wallet_pb2.ABIJSONToBinResponse,
            ),
        }


class WalletServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.getSupportCoins = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getSupportCoins',
            savour_rpc.wallet_pb2.SupportCoinsRequest,
            savour_rpc.wallet_pb2.SupportCoinsResponse,
        )
        self.convertAddress = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/convertAddress',
            savour_rpc.wallet_pb2.ConvertAddressRequest,
            savour_rpc.wallet_pb2.ConvertAddressResponse,
        )
        self.validAddress = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/validAddress',
            savour_rpc.wallet_pb2.ValidAddressRequest,
            savour_rpc.wallet_pb2.ValidAddressResponse,
        )
        self.getBlock = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getBlock',
            savour_rpc.wallet_pb2.BlockRequest,
            savour_rpc.wallet_pb2.BlockResponse,
        )
        self.getNonce = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getNonce',
            savour_rpc.wallet_pb2.NonceRequest,
            savour_rpc.wallet_pb2.NonceResponse,
        )
        self.getGasPrice = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getGasPrice',
            savour_rpc.wallet_pb2.GasPriceRequest,
            savour_rpc.wallet_pb2.GasPriceResponse,
        )
        self.getBalance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getBalance',
            savour_rpc.wallet_pb2.BalanceRequest,
            savour_rpc.wallet_pb2.BalanceResponse,
        )
        self.getAccount = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getAccount',
            savour_rpc.wallet_pb2.AccountRequest,
            savour_rpc.wallet_pb2.AccountResponse,
        )
        self.getMinRent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getMinRent',
            savour_rpc.wallet_pb2.MinRentRequest,
            savour_rpc.wallet_pb2.MinRentResponse,
        )
        self.SendTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/SendTx',
            savour_rpc.wallet_pb2.SendTxRequest,
            savour_rpc.wallet_pb2.SendTxResponse,
        )
        self.getTxByAddress = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getTxByAddress',
            savour_rpc.wallet_pb2.TxAddressRequest,
            savour_rpc.wallet_pb2.TxAddressResponse,
        )
        self.getTxByHash = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getTxByHash',
            savour_rpc.wallet_pb2.TxHashRequest,
            savour_rpc.wallet_pb2.TxHashResponse,
        )
        self.getUtxo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getUtxo',
            savour_rpc.wallet_pb2.UtxoRequest,
            savour_rpc.wallet_pb2.UtxoResponse,
        )
        self.getUnspentOutputs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getUnspentOutputs',
            savour_rpc.wallet_pb2.UnspentOutputsRequest,
            savour_rpc.wallet_pb2.UnspentOutputsResponse,
        )
        self.getUtxoInsFromData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getUtxoInsFromData',
            savour_rpc.wallet_pb2.UtxoInsFromDataRequest,
            savour_rpc.wallet_pb2.UtxoInsResponse,
        )
        self.getAccountTxFromData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getAccountTxFromData',
            savour_rpc.wallet_pb2.TxFromDataRequest,
            savour_rpc.wallet_pb2.AccountTxResponse,
        )
        self.getUtxoTxFromData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getUtxoTxFromData',
            savour_rpc.wallet_pb2.TxFromDataRequest,
            savour_rpc.wallet_pb2.UtxoTxResponse,
        )
        self.getAccountTxFromSignedData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/getAccountTxFromSignedData',
            savour_rpc.wallet_pb2.TxFromSignedDataRequest,
            savour_rpc.wallet_pb2.AccountTxResponse,
        )
        self.GetUtxoTxFromSignedData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/GetUtxoTxFromSignedData',
            savour_rpc.wallet_pb2.TxFromSignedDataRequest,
            savour_rpc.wallet_pb2.UtxoTxResponse,
        )
        self.createAccountSignedTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/createAccountSignedTx',
            savour_rpc.wallet_pb2.CreateAccountSignedTxRequest,
            savour_rpc.wallet_pb2.CreateSignedTxResponse,
        )
        self.createAccountTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/createAccountTx',
            savour_rpc.wallet_pb2.CreateAccountTxRequest,
            savour_rpc.wallet_pb2.CreateAccountTxResponse,
        )
        self.createUtxoSignedTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/createUtxoSignedTx',
            savour_rpc.wallet_pb2.CreateUtxoSignedTxRequest,
            savour_rpc.wallet_pb2.CreateSignedTxResponse,
        )
        self.createUtxoTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/createUtxoTx',
            savour_rpc.wallet_pb2.CreateUtxoTxRequest,
            savour_rpc.wallet_pb2.CreateUtxoTxResponse,
        )
        self.verifyAccountSignedTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/verifyAccountSignedTx',
            savour_rpc.wallet_pb2.VerifySignedTxRequest,
            savour_rpc.wallet_pb2.VerifySignedTxResponse,
        )
        self.verifyUtxoSignedTx = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/verifyUtxoSignedTx',
            savour_rpc.wallet_pb2.VerifySignedTxRequest,
            savour_rpc.wallet_pb2.VerifySignedTxResponse,
        )
        self.ABIBinToJSON = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/ABIBinToJSON',
            savour_rpc.wallet_pb2.ABIBinToJSONRequest,
            savour_rpc.wallet_pb2.ABIBinToJSONResponse,
        )
        self.ABIJSONToBin = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.wallet.WalletService/ABIJSONToBin',
            savour_rpc.wallet_pb2.ABIJSONToBinRequest,
            savour_rpc.wallet_pb2.ABIJSONToBinResponse,
        )
