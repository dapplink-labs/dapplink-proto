# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: savour_rpc/l3staking.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import savour_rpc.l3staking_pb2


class L3StakingServiceBase(abc.ABC):

    @abc.abstractmethod
    async def updateStakingNodeIncome(self, stream: 'grpclib.server.Stream[savour_rpc.l3staking_pb2.StakingNodeReq, savour_rpc.l3staking_pb2.StakingNodeRep]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/services.savour_rpc.l3staking.L3StakingService/updateStakingNodeIncome': grpclib.const.Handler(
                self.updateStakingNodeIncome,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.l3staking_pb2.StakingNodeReq,
                savour_rpc.l3staking_pb2.StakingNodeRep,
            ),
        }


class L3StakingServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.updateStakingNodeIncome = grpclib.client.UnaryUnaryMethod(
            channel,
            '/services.savour_rpc.l3staking.L3StakingService/updateStakingNodeIncome',
            savour_rpc.l3staking_pb2.StakingNodeReq,
            savour_rpc.l3staking_pb2.StakingNodeRep,
        )
