# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: savour_rpc/market.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import savour_rpc.common_pb2
import savour_rpc.market_pb2


class PriceServiceBase(abc.ABC):

    @abc.abstractmethod
    async def getExchanges(self, stream: 'grpclib.server.Stream[savour_rpc.market_pb2.ExchangeRequest, savour_rpc.market_pb2.ExchangeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getAssets(self, stream: 'grpclib.server.Stream[savour_rpc.market_pb2.AssetRequest, savour_rpc.market_pb2.AssetResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getSymbols(self, stream: 'grpclib.server.Stream[savour_rpc.market_pb2.SymbolRequest, savour_rpc.market_pb2.SymbolResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getSymbolPrices(self, stream: 'grpclib.server.Stream[savour_rpc.market_pb2.SymbolPriceRequest, savour_rpc.market_pb2.SymbolPriceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getStableCoins(self, stream: 'grpclib.server.Stream[savour_rpc.market_pb2.StableCoinRequest, savour_rpc.market_pb2.StableCoinResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getStableCoinPrice(self, stream: 'grpclib.server.Stream[savour_rpc.market_pb2.StableCoinPriceRequest, savour_rpc.market_pb2.StableCoinPriceResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/savour_rpc.market.PriceService/getExchanges': grpclib.const.Handler(
                self.getExchanges,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.market_pb2.ExchangeRequest,
                savour_rpc.market_pb2.ExchangeResponse,
            ),
            '/savour_rpc.market.PriceService/getAssets': grpclib.const.Handler(
                self.getAssets,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.market_pb2.AssetRequest,
                savour_rpc.market_pb2.AssetResponse,
            ),
            '/savour_rpc.market.PriceService/getSymbols': grpclib.const.Handler(
                self.getSymbols,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.market_pb2.SymbolRequest,
                savour_rpc.market_pb2.SymbolResponse,
            ),
            '/savour_rpc.market.PriceService/getSymbolPrices': grpclib.const.Handler(
                self.getSymbolPrices,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.market_pb2.SymbolPriceRequest,
                savour_rpc.market_pb2.SymbolPriceResponse,
            ),
            '/savour_rpc.market.PriceService/getStableCoins': grpclib.const.Handler(
                self.getStableCoins,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.market_pb2.StableCoinRequest,
                savour_rpc.market_pb2.StableCoinResponse,
            ),
            '/savour_rpc.market.PriceService/getStableCoinPrice': grpclib.const.Handler(
                self.getStableCoinPrice,
                grpclib.const.Cardinality.UNARY_UNARY,
                savour_rpc.market_pb2.StableCoinPriceRequest,
                savour_rpc.market_pb2.StableCoinPriceResponse,
            ),
        }


class PriceServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.getExchanges = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.market.PriceService/getExchanges',
            savour_rpc.market_pb2.ExchangeRequest,
            savour_rpc.market_pb2.ExchangeResponse,
        )
        self.getAssets = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.market.PriceService/getAssets',
            savour_rpc.market_pb2.AssetRequest,
            savour_rpc.market_pb2.AssetResponse,
        )
        self.getSymbols = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.market.PriceService/getSymbols',
            savour_rpc.market_pb2.SymbolRequest,
            savour_rpc.market_pb2.SymbolResponse,
        )
        self.getSymbolPrices = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.market.PriceService/getSymbolPrices',
            savour_rpc.market_pb2.SymbolPriceRequest,
            savour_rpc.market_pb2.SymbolPriceResponse,
        )
        self.getStableCoins = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.market.PriceService/getStableCoins',
            savour_rpc.market_pb2.StableCoinRequest,
            savour_rpc.market_pb2.StableCoinResponse,
        )
        self.getStableCoinPrice = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savour_rpc.market.PriceService/getStableCoinPrice',
            savour_rpc.market_pb2.StableCoinPriceRequest,
            savour_rpc.market_pb2.StableCoinPriceResponse,
        )
