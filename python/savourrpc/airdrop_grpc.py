# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: savourrpc/airdrop.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import savourrpc.common_pb2
import savourrpc.airdrop_pb2


class AirdropServiceBase(abc.ABC):

    @abc.abstractmethod
    async def submitDppLinkPoints(self, stream: 'grpclib.server.Stream[savourrpc.airdrop_pb2.DppLinkPointsReq, savourrpc.airdrop_pb2.DppLinkPointsRep]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/savourrpc.airdrop.AirdropService/submitDppLinkPoints': grpclib.const.Handler(
                self.submitDppLinkPoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                savourrpc.airdrop_pb2.DppLinkPointsReq,
                savourrpc.airdrop_pb2.DppLinkPointsRep,
            ),
        }


class AirdropServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.submitDppLinkPoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/savourrpc.airdrop.AirdropService/submitDppLinkPoints',
            savourrpc.airdrop_pb2.DppLinkPointsReq,
            savourrpc.airdrop_pb2.DppLinkPointsRep,
        )
